From 5f791025227b934175a87cd294a873d9362e2173 Mon Sep 17 00:00:00 2001
From: Jiri Hubacek <hubacji1@fel.cvut.cz>
Date: Sat, 1 Jul 2017 22:16:07 +0200
Subject: [PATCH 1/3] Change project name, teensy version

---
 Makefile | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/Makefile b/Makefile
index c17c040..1f3b5da 100644
--- a/Makefile
+++ b/Makefile
@@ -1,8 +1,8 @@
 # The name of your project (used to name the compiled .hex file)
-TARGET = $(notdir $(CURDIR))
+TARGET = teensy-drive
 
 # The teensy version to use, 30, 31, 35, 36, or LC
-TEENSY = 30
+TEENSY = 31
 
 # Set to 24000000, 48000000, or 96000000 to set CPU core speed
 TEENSY_CORE_SPEED = 48000000
-- 
2.1.4


From 268683615a364e4d106f737d6f0b75588a6e5480 Mon Sep 17 00:00:00 2001
From: Jiri Hubacek <hubacji1@fel.cvut.cz>
Date: Sat, 1 Jul 2017 22:17:40 +0200
Subject: [PATCH 2/3] Add `Bounce2` library

---
 libraries/Bounce2/.gitignore         |   1 +
 libraries/Bounce2/Bounce2.cpp        | 127 +++++++++++++++++++++++++++++++++++
 libraries/Bounce2/Bounce2.h          |  88 ++++++++++++++++++++++++
 libraries/Bounce2/INSTALL.txt        |   1 +
 libraries/Bounce2/LICENSE            |  20 ++++++
 libraries/Bounce2/README.md          |  37 ++++++++++
 libraries/Bounce2/keywords.txt       |  29 ++++++++
 libraries/Bounce2/library.json       |  16 +++++
 libraries/Bounce2/library.properties |   9 +++
 9 files changed, 328 insertions(+)
 create mode 100644 libraries/Bounce2/.gitignore
 create mode 100644 libraries/Bounce2/Bounce2.cpp
 create mode 100644 libraries/Bounce2/Bounce2.h
 create mode 100644 libraries/Bounce2/INSTALL.txt
 create mode 100644 libraries/Bounce2/LICENSE
 create mode 100644 libraries/Bounce2/README.md
 create mode 100644 libraries/Bounce2/keywords.txt
 create mode 100644 libraries/Bounce2/library.json
 create mode 100644 libraries/Bounce2/library.properties

diff --git a/libraries/Bounce2/.gitignore b/libraries/Bounce2/.gitignore
new file mode 100644
index 0000000..3997bea
--- /dev/null
+++ b/libraries/Bounce2/.gitignore
@@ -0,0 +1 @@
+*.db
\ No newline at end of file
diff --git a/libraries/Bounce2/Bounce2.cpp b/libraries/Bounce2/Bounce2.cpp
new file mode 100644
index 0000000..f6470d8
--- /dev/null
+++ b/libraries/Bounce2/Bounce2.cpp
@@ -0,0 +1,127 @@
+// Please read Bounce2.h for information about the liscence and authors
+
+#if defined(ARDUINO) && ARDUINO >= 100
+#include "Arduino.h"
+#else
+#include "WProgram.h"
+#endif
+#include "Bounce2.h"
+
+#define DEBOUNCED_STATE 0
+#define UNSTABLE_STATE  1
+#define STATE_CHANGED   3
+
+
+Bounce::Bounce()
+    : previous_millis(0)
+    , interval_millis(10)
+    , state(0)
+    , pin(0)
+{}
+
+void Bounce::attach(int pin) {
+    this->pin = pin;
+    state = 0;
+    if (digitalRead(pin)) {
+        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
+    }
+#ifdef BOUNCE_LOCK_OUT
+    previous_millis = 0;
+#else
+    previous_millis = millis();
+#endif
+}
+
+void Bounce::attach(int pin, int mode){
+  pinMode(pin, mode);
+  
+  this->attach(pin);
+}
+
+void Bounce::interval(uint16_t interval_millis)
+{
+    this->interval_millis = interval_millis;
+}
+
+bool Bounce::update()
+{
+#ifdef BOUNCE_LOCK_OUT
+    state &= ~_BV(STATE_CHANGED);
+    // Ignore everything if we are locked out
+    if (millis() - previous_millis >= interval_millis) {
+        bool currentState = digitalRead(pin);
+        if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
+            previous_millis = millis();
+            state ^= _BV(DEBOUNCED_STATE);
+            state |= _BV(STATE_CHANGED);
+        }
+    }
+    return state & _BV(STATE_CHANGED);
+
+#elif defined BOUNCE_WITH_PROMPT_DETECTION
+    // Read the state of the switch port into a temporary variable.
+    bool readState = digitalRead(pin);
+
+    // Clear Changed State Flag - will be reset if we confirm a button state change.
+    state &= ~_BV(STATE_CHANGED);
+
+    if ( readState != (bool)(state & _BV(DEBOUNCED_STATE))) {
+      // We have seen a change from the current button state.
+
+      if ( millis() - previous_millis >= interval_millis ) {
+	// We have passed the time threshold, so a new change of state is allowed.
+	// set the STATE_CHANGED flag and the new DEBOUNCED_STATE.
+	// This will be prompt as long as there has been greater than interval_misllis ms since last change of input.
+	// Otherwise debounced state will not change again until bouncing is stable for the timeout period.
+	state ^= _BV(DEBOUNCED_STATE);
+	state |= _BV(STATE_CHANGED);
+      }
+    }
+
+    // If the readState is different from previous readState, reset the debounce timer - as input is still unstable
+    // and we want to prevent new button state changes until the previous one has remained stable for the timeout.
+    if ( readState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
+	// Update Unstable Bit to macth readState
+        state ^= _BV(UNSTABLE_STATE);
+        previous_millis = millis();
+    }
+    // return just the sate changed bit
+    return state & _BV(STATE_CHANGED);
+#else
+    // Read the state of the switch in a temporary variable.
+    bool currentState = digitalRead(pin);
+    state &= ~_BV(STATE_CHANGED);
+
+    // If the reading is different from last reading, reset the debounce counter
+    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
+        previous_millis = millis();
+        state ^= _BV(UNSTABLE_STATE);
+    } else
+        if ( millis() - previous_millis >= interval_millis ) {
+            // We have passed the threshold time, so the input is now stable
+            // If it is different from last state, set the STATE_CHANGED flag
+            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
+                previous_millis = millis();
+                state ^= _BV(DEBOUNCED_STATE);
+                state |= _BV(STATE_CHANGED);
+            }
+        }
+
+    return state & _BV(STATE_CHANGED);
+#endif
+}
+
+bool Bounce::read()
+{
+    return state & _BV(DEBOUNCED_STATE);
+}
+
+bool Bounce::rose()
+{
+    return ( state & _BV(DEBOUNCED_STATE) ) && ( state & _BV(STATE_CHANGED));
+}
+
+bool Bounce::fell()
+{
+    return !( state & _BV(DEBOUNCED_STATE) ) && ( state & _BV(STATE_CHANGED));
+}
diff --git a/libraries/Bounce2/Bounce2.h b/libraries/Bounce2/Bounce2.h
new file mode 100644
index 0000000..92200fe
--- /dev/null
+++ b/libraries/Bounce2/Bounce2.h
@@ -0,0 +1,88 @@
+/*
+  The MIT License (MIT)
+
+  Copyright (c) 2013 thomasfredericks
+
+  Permission is hereby granted, free of charge, to any person obtaining a copy of
+  this software and associated documentation files (the "Software"), to deal in
+  the Software without restriction, including without limitation the rights to
+  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+  the Software, and to permit persons to whom the Software is furnished to do so,
+  subject to the following conditions:
+
+  The above copyright notice and this permission notice shall be included in all
+  copies or substantial portions of the Software.
+
+  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+*/
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * * * *
+  Main code by Thomas O Fredericks (tof@t-o-f.info)
+  Previous contributions by Eric Lowry, Jim Schimpf and Tom Harkaway
+  * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
+
+#ifndef Bounce2_h
+#define Bounce2_h
+
+// Uncomment the following line for "LOCK-OUT" debounce method
+//#define BOUNCE_LOCK_OUT
+
+// Uncomment the following line for "BOUNCE_WITH_PROMPT_DETECTION" debounce method
+//#define BOUNCE_WITH_PROMPT_DETECTION
+
+#include <inttypes.h>
+
+#ifndef _BV
+#define _BV(n) (1<<(n))
+#endif
+
+class Bounce
+{
+ public:
+    // Create an instance of the bounce library
+    Bounce();
+
+    // Attach to a pin (and also sets initial state)
+    void attach(int pin);
+    
+    // Attach to a pin (and also sets initial state) and sets pin to mode (INPUT/INPUT_PULLUP/OUTPUT)
+    void attach(int pin, int mode);
+
+    // Sets the debounce interval
+    void interval(uint16_t interval_millis);
+
+    // Updates the pin
+    // Returns 1 if the state changed
+    // Returns 0 if the state did not change
+    bool update();
+
+    // Returns the updated pin state
+    bool read();
+
+    // Returns the falling pin state
+    bool fell();
+
+    // Returns the rising pin state
+    bool rose();
+
+    // Partial compatibility for programs written with Bounce version 1
+    bool risingEdge() { return rose(); }
+    bool fallingEdge() { return fell(); }
+    Bounce(uint8_t pin, unsigned long interval_millis ) : Bounce() {
+        attach(pin);
+        interval(interval_millis);
+    }
+
+ protected:
+    unsigned long previous_millis;
+    uint16_t interval_millis;
+    uint8_t state;
+    uint8_t pin;
+};
+
+#endif
diff --git a/libraries/Bounce2/INSTALL.txt b/libraries/Bounce2/INSTALL.txt
new file mode 100644
index 0000000..0bd2f8e
--- /dev/null
+++ b/libraries/Bounce2/INSTALL.txt
@@ -0,0 +1 @@
+Put the "Bounce2" folder in your Arduino or Wiring "libraries" folder. 
diff --git a/libraries/Bounce2/LICENSE b/libraries/Bounce2/LICENSE
new file mode 100644
index 0000000..f945b53
--- /dev/null
+++ b/libraries/Bounce2/LICENSE
@@ -0,0 +1,20 @@
+The MIT License (MIT)
+
+Copyright (c) 2013 thomasfredericks
+
+Permission is hereby granted, free of charge, to any person obtaining a copy of
+this software and associated documentation files (the "Software"), to deal in
+the Software without restriction, including without limitation the rights to
+use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+the Software, and to permit persons to whom the Software is furnished to do so,
+subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
diff --git a/libraries/Bounce2/README.md b/libraries/Bounce2/README.md
new file mode 100644
index 0000000..ef3aa8a
--- /dev/null
+++ b/libraries/Bounce2/README.md
@@ -0,0 +1,37 @@
+BOUNCE 2
+=====================
+
+Debouncing library for Arduino or Wiring
+
+by Thomas Ouellet Fredericks
+
+with contributions from:
+
+Eric Lowry, Jim Schimpf and Tom Harkaway
+
+
+HAVE A QUESTION?
+=====================
+Please post your questions here :
+http://forum.arduino.cc/index.php?topic=266132.0
+
+DOWNLOAD
+=====================
+
+Download the latest version (version 2) here :
+
+https://github.com/thomasfredericks/Bounce2/archive/master.zip
+
+
+DOCUMENTATION
+=====================
+
+The latest version (version 2) documentation can be found here : 
+
+https://github.com/thomasfredericks/Bounce2/wiki
+
+
+ABOUT BOUNCE 1 (ORIGINAL VERSION)
+=====================
+
+The original version of Bounce (Bounce 1) is included but not supported anymore.
diff --git a/libraries/Bounce2/keywords.txt b/libraries/Bounce2/keywords.txt
new file mode 100644
index 0000000..22285fe
--- /dev/null
+++ b/libraries/Bounce2/keywords.txt
@@ -0,0 +1,29 @@
+#######################################
+# Syntax Coloring Map For Bounce2
+#######################################
+
+#######################################
+# Datatypes (KEYWORD1)
+#######################################
+
+Bounce	 KEYWORD1
+
+#######################################
+# Methods and Functions (KEYWORD2)
+#######################################
+
+update	 KEYWORD2
+interval	 KEYWORD2
+read	 KEYWORD2
+attach	 KEYWORD2
+rose	KEYWORD2
+fell	KEYWORD2
+
+#######################################
+# Instances (KEYWORD2)
+#######################################
+
+#######################################
+# Constants (LITERAL1)
+#######################################
+
diff --git a/libraries/Bounce2/library.json b/libraries/Bounce2/library.json
new file mode 100644
index 0000000..d666ba7
--- /dev/null
+++ b/libraries/Bounce2/library.json
@@ -0,0 +1,16 @@
+{
+  "name": "Bounce2",
+  "keywords": "bounce, signal, input, ouput",
+  "description": "Debouncing library for Arduino or Wiring",
+  "repository": {
+    "type": "git",
+    "url": "https://github.com/thomasfredericks/Bounce2.git"
+  },
+  "version": "2.1",
+  "exclude": [
+    "*.png",
+    "*.zip"
+  ],
+  "frameworks": "arduino",
+  "platforms": "*"
+}
diff --git a/libraries/Bounce2/library.properties b/libraries/Bounce2/library.properties
new file mode 100644
index 0000000..33f1980
--- /dev/null
+++ b/libraries/Bounce2/library.properties
@@ -0,0 +1,9 @@
+name=Bounce2
+version=2.21
+author=Thomas O Fredericks <tof@t-o-f.info> with contributions fromEric Lowry, Jim Schimpf and Tom Harkaway
+maintainer=Thomas O Fredericks <tof@t-o-f.info>
+sentence=Debouncing library for Arduino and Wiring.
+paragraph=Deboucing switches and toggles is important.
+category=Signal Input/Output
+url=https://github.com/thomasfredericks/Bounce2
+architectures=*
\ No newline at end of file
-- 
2.1.4


From 52c91c23d3b071b4be4cb428633281876b1233de Mon Sep 17 00:00:00 2001
From: Jiri Hubacek <hubacji1@fel.cvut.cz>
Date: Sat, 1 Jul 2017 22:19:18 +0200
Subject: [PATCH 3/3] Change `main.cpp` for F1/10 teensy firmware source

---
 src/main.cpp | 29 +----------------------------
 1 file changed, 1 insertion(+), 28 deletions(-)
 mode change 100644 => 120000 src/main.cpp

diff --git a/src/main.cpp b/src/main.cpp
deleted file mode 100644
index aaaf53a..0000000
--- a/src/main.cpp
+++ /dev/null
@@ -1,28 +0,0 @@
-#include "WProgram.h"
-
-extern "C" int main(void)
-{
-#ifdef USING_MAKEFILE
-
-	// To use Teensy 3.0 without Arduino, simply put your code here.
-	// For example:
-
-	pinMode(13, OUTPUT);
-	while (1) {
-		digitalWriteFast(13, HIGH);
-		delay(500);
-		digitalWriteFast(13, LOW);
-		delay(500);
-	}
-
-
-#else
-	// Arduino's main() function just calls setup() and loop()....
-	setup();
-	while (1) {
-		loop();
-		yield();
-	}
-#endif
-}
-
diff --git a/src/main.cpp b/src/main.cpp
new file mode 120000
index 0000000..dfd7ec5
--- /dev/null
+++ b/src/main.cpp
@@ -0,0 +1 @@
+../../teensy-drive/main.cpp
\ No newline at end of file
-- 
2.1.4

